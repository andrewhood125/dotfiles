set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'int3/vim-extradite'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-rails'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-bundler'
Plugin 'marlun/vim-starwars'
Plugin 'kchmck/vim-coffee-script'
Plugin 'othree/html5.vim'
Plugin 'rking/ag.vim'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'bling/vim-airline'
Plugin 'Chiel92/vim-autoformat'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'ervandew/supertab'
Plugin 'junegunn/fzf.vim'
Plugin 'StanAngeloff/php.vim.git'
Plugin 'derekwyatt/vim-scala'
Plugin 'vim-perl/vim-perl'
Plugin 'mattn/emmet-vim'
Plugin 'xsbeats/vim-blade'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'slim-template/vim-slim'
Plugin 'rizzatti/dash.vim'
Plugin 'chrisbra/Colorizer'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'kopischke/vim-fetch'
Plugin 'leafgarland/typescript-vim'
Plugin 'elzr/vim-json'
Plugin 'w0rp/ale'
Plugin 'davidbeckingsale/writegood.vim'
Plugin 'posva/vim-vue'




" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" General
let mapleader = '\'
set nowrap
colorscheme darth
"highlight line the curson is on"
"set cursorline
set modeline "read settings from modelines"
"set relativenumber " Show relative line numbers
set number
set tabstop=4 shiftwidth=4 expandtab
syntax on
set list
set scrolloff=10
setlocal spell

map <Leader>w <C-w><C-w>

" pasting
map <Leader>v :set invpaste paste?<CR>

"FZF
set rtp+=/usr/local/opt/fzf
map <Leader>p :FZF<cr>


"Tabs
map <Leader>t :tabedit<CR>
map <Leader>[ :tabprevious<CR>
map <Leader>] :tabnext<CR>

"ctrlp
let g:ctrlp_custom_ignore = {
    \ 'dir': 'node_modules',
    \ }

"Window sizing
map <Leader>= :vertical resize +10<CR>
map <Leader>- :vertical resize -10<CR>

"Open new splits on the right
set splitright

" Highlighting Search
set hlsearch
map <Leader>hs :noh<CR>

"Autoformat
map <Leader>f :Autoformat<CR>

" NerdTree
map <Leader>n :NERDTreeToggle<CR>
map <Leader>N :NERDTreeFind<CR>
let NERDTreeShowHidden=1
let NERDTreeWinSize=40

" viminfo
" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo'

"tabs
autocmd FileType php set tabstop=4 shiftwidth=4 expandtab
autocmd FileType yaml set tabstop=2 shiftwidth=2 expandtab
autocmd FileType ruby set tabstop=2 shiftwidth=2 expandtab
autocmd FileType scss set tabstop=2 shiftwidth=2 expandtab
autocmd FileType vue set tabstop=2 shiftwidth=2 expandtab
autocmd FileType javascript set tabstop=2 shiftwidth=2 expandtab
autocmd FileType coffee set tabstop=2 shiftwidth=2 expandtab
autocmd FileType eruby set tabstop=2 shiftwidth=2 expandtab
autocmd FileType blade set tabstop=2 shiftwidth=2 expandtab
autocmd BufRead,BufNewFile *.yml.* set filetype=yaml
autocmd BufRead,BufNewFile *.reek set filetype=yaml

"text width
au BufRead,BufNewFile *.md setlocal textwidth=80

" vim-airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = '▶'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.readonly = ''
let g:airline_symbols.whitespace = 'Ξ'

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['']
let g:syntastic_javascript_checkers = ['eslint', 'jshint']
let g:syntastic_ruby_checkers = ['rubocop', 'reek']
let g:syntastic_html_tidy_exec = 'tidy5'

map <Leader>ss :SyntasticCheck<CR>
map <Leader>sc :lclose<CR>
map <Leader>so :Errors<CR>

"Silver Searcher
let g:ackprg = 'ag --nogroup --nocolor --column'

"Syntax
let g:autoformat_verbosemode = 1
if !exists('g:formatters_blade')
    let g:formatters_blade = ['htmlbeautify', 'tidy_html']
endif

"indent guides
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_color_change_percent = 10
let g:indent_guides_start_level = 2
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=239
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236

"Supertab
let g:SuperTabLongestEnhanced = 1
let g:SuperTabDefaultCompletionType = "context"
set completeopt+=longest


" Copy buffer into OS clibboard
map <Leader>copy :set clipboard=unnamed<CR>

"rspec
let g:rspec_command = "!bundle exec rspec {spec}"
map <Leader>t :call RunNearestSpec()<CR>
map <Leader>ta :call RunCurrentSpecFile()<CR>

map <leader>rubo :!bundle exec rubocop %

" ALE
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = '1'
